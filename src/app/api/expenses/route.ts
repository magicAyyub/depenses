import { NextRequest, NextResponse } from 'next/server';
import { verifyToken, getUserByEmail } from '@/lib/auth';
import { addExpense, getAllExpensesWithMonths } from '@/lib/expenses';
import { Expense } from '@/types';

export async function GET(request: NextRequest) {
  try {
    const authHeader = request.headers.get('authorization');
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json(
        { success: false, message: 'Token manquant' },
        { status: 401 }
      );
    }

    const token = authHeader.substring(7);
    const decoded = verifyToken(token);

    if (!decoded) {
      return NextResponse.json(
        { success: false, message: 'Token invalide' },
        { status: 401 }
      );
    }

    const expenseMonths = await getAllExpensesWithMonths();

    return NextResponse.json({
      success: true,
      expenseMonths
    });

  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration:', error);
    return NextResponse.json(
      { success: false, message: 'Erreur lors de la r√©cup√©ration' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const authHeader = request.headers.get('authorization');
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('‚ùå Token manquant');
      return NextResponse.json(
        { success: false, message: 'Token manquant' },
        { status: 401 }
      );
    }

    const token = authHeader.substring(7);
    const decoded = verifyToken(token);

    if (!decoded) {
      console.log('‚ùå Token invalide');
      return NextResponse.json(
        { success: false, message: 'Token invalide' },
        { status: 401 }
      );
    }

    const user = getUserByEmail(decoded.email);
    if (!user) {
      console.log('‚ùå Utilisateur non trouv√©');
      return NextResponse.json(
        { success: false, message: 'Utilisateur non trouv√©' },
        { status: 404 }
      );
    }

    const { expenses } = await request.json();
    console.log('üìù Donn√©es re√ßues:', { expenses, userEmail: user.email });

    if (!expenses || !Array.isArray(expenses) || expenses.length === 0) {
      console.log('‚ùå Donn√©es invalides:', expenses);
      return NextResponse.json(
        { success: false, message: 'Donn√©es de d√©penses invalides' },
        { status: 400 }
      );
    }

    const savedExpenses: Expense[] = [];

    // Sauvegarder chaque d√©pense
    for (const expenseData of expenses) {
      if (!expenseData.amount || !expenseData.description) {
        console.log('‚ö†Ô∏è D√©pense ignor√©e (donn√©es manquantes):', expenseData);
        continue; // Ignorer les d√©penses invalides
      }

      console.log('üíæ Sauvegarde de la d√©pense:', expenseData);

      const expense = await addExpense({
        amount: parseFloat(expenseData.amount.toString()),
        description: expenseData.description,
        date: expenseData.date || new Date().toISOString(),
        createdBy: user.name,
        createdAt: new Date().toISOString()
      }, user.id);

      console.log('‚úÖ D√©pense sauvegard√©e:', expense);
      savedExpenses.push(expense);
    }

    console.log(`üéâ Total sauvegard√©: ${savedExpenses.length} d√©pense(s)`);
    return NextResponse.json({
      success: true,
      expenses: savedExpenses,
      message: `${savedExpenses.length} d√©pense(s) sauvegard√©e(s)`
    });

  } catch (error) {
    console.error('üí• Erreur lors de la sauvegarde:', error);
    return NextResponse.json(
      { success: false, message: 'Erreur lors de la sauvegarde' },
      { status: 500 }
    );
  }
}
